{"version":3,"sources":["components/Statistics/Statistics.module.css","components/Section/Section.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Notification/Notification.module.css","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","components/Statistics/Statistics.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","className","s","btn","proptypes","PropTypes","string","isRequired","func","Section","title","children","section","Notification","message","note","Statistics","good","neutral","bad","total","percentage","list","item","positive","middle","negative","sum","percents","App","state","handleClick","e","stateValue","currentTarget","setState","prevState","countTotalFeedbackAmount","countPositiveFeedbackPercentage","Math","round","this","Object","keys","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18504208.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__3iIkq\",\"item\":\"Statistics_item__29Vs3\",\"positive\":\"Statistics_positive__1EDSG\",\"middle\":\"Statistics_middle__1Uxyn\",\"negative\":\"Statistics_negative__3T91F\",\"sum\":\"Statistics_sum__2-ZnJ\",\"percents\":\"Statistics_percents__3o_jL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__1c4sx\",\"title\":\"Section_title__hML2L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FeedbackOptions_btn__1caQ7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"note\":\"Notification_note__cS_qu\"};","import PropTypes from \"prop-types\";\r\nimport s from \"./FeedbackOptions.module.css\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return options.map((option) => (\r\n    <button\r\n      key={option}\r\n      type=\"button\"\r\n      name={option}\r\n      onClick={onLeaveFeedback}\r\n      className={s.btn}\r\n    >\r\n      {option}\r\n    </button>\r\n  ));\r\n};\r\n\r\nFeedbackOptions.proptypes = {\r\n  option: PropTypes.string.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./Section.module.css\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <div className={s.section}>\r\n      <h2 className={s.title}>{title}</h2>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.element.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./Notification.module.css\";\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p className={s.note}>{message}</p>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import PropTypes from \"prop-types\";\r\nimport Notification from \"../Notification/Notification\";\r\nimport s from \"./Statistics.module.css\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, percentage }) => (\r\n  <div>\r\n    {total > 0 ? (\r\n      <ul className={s.list}>\r\n        <li className={s.item}>\r\n          <span className={s.positive}>Good: {good}</span>\r\n        </li>\r\n        <li className={s.item}>\r\n          <span className={s.middle}>Neutral: {neutral}</span>\r\n        </li>\r\n        <li className={s.item}>\r\n          <span className={s.negative}>Bad: {bad}</span>\r\n        </li>\r\n        <li className={s.item}>\r\n          <span className={s.sum}>Total: {total}</span>\r\n        </li>\r\n        <li className={s.item}>\r\n          <span className={s.percents}>Positive feedback: {percentage} %</span>\r\n        </li>\r\n      </ul>\r\n    ) : (\r\n      <Notification message={\"No feedback given\"} />\r\n    )}\r\n  </div>\r\n);\r\n\r\nexport default Statistics;\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  percentage: PropTypes.number.isRequired,\r\n};\r\n","import React, { Component } from \"react\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Section from \"./components/Section/Section\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleClick = (e) => {\n    const stateValue = e.currentTarget.name;\n\n    this.setState((prevState) => {\n      return { [stateValue]: prevState[stateValue] + 1 };\n    });\n  };\n\n  countTotalFeedbackAmount = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    if (!good) {\n      return 0;\n    }\n    return Math.round((good / this.countTotalFeedbackAmount()) * 100);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    // const { total } = this.countTotalFeedbackAmount();\n    // const { positiveFeedback } = this.countPositiveFeedbackPercentage();\n\n    return (\n      <div className=\"wrapper\">\n        <FeedbackOptions\n          options={Object.keys(this.state)}\n          onLeaveFeedback={this.handleClick}\n        />\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedbackAmount()} // почему не отрабатывал вариант с деструктуризацией????\n            percentage={this.countPositiveFeedbackPercentage()} // почему не отрабатывал вариант с деструктуризацией????\n          />\n        </Section>\n      </div>\n    );\n  }\n}\n\n// {\n//   total > 0 ? (\n//     <Statistics\n//       good={good}\n//       neutral={neutral}\n//       bad={bad}\n//       total={total}\n//       percentage={positiveFeedback}\n//     />\n//   ) : (\n//     <Notification message=\"No feedback given\" />\n//   );\n// }\n\n// {\n//   /* <h2>PLease leave feedback</h2>\n//         <button type=\"button\" name=\"good\" onClick={this.handleClick}>\n//           Good\n//         </button>\n//         <button type=\"button\" name=\"neutral\" onClick={this.handleClick}>\n//           Neutral\n//         </button>\n//         <button type=\"button\" name=\"bad\" onClick={this.handleClick}>\n//           Bad\n//         </button>\n//         <h2>Statistics</h2>\n//         <ul>\n//           <li>Good: {good}</li>\n//           <li>Neutral: {neutral}</li>\n//           <li>Bad: {bad}</li>\n//           <li>Total: {this.countTotalFeedbackAmount()}</li>\n//           <li>Positive feedback: {this.countPositiveFeedbackPercentage()} %</li>\n//         </ul> */\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}